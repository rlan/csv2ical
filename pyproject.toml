[project]
name = "csv2ical"
description = "A CLI tool that converts a CSV file with event details into an iCalendar ICS file. The ICS file can then be imported into apps like Google Calendar, Outlook, macOS Calendar and etc."
authors = [{ name = "Rick Lan" }]
license = "MIT"
readme = "README.md"
requires-python = ">=3.8,<4.0"
version = "1.0.1"
dependencies = [
    "click",
    "icalendar>=4.0.1",
]

[dependency-groups]
dev = [
]
lint = [
    "basedpyright>=1.29.1",
    "codespell>=2.4.1",
    "ruff>=0.11.9",
]

[project.scripts]
csv2ical = "csv2ical.cli:main"

[project.urls]
Homepage = "https://github.com/rlan/csv2ical"
Repository = "https://github.com/rlan/csv2ical"
Documentation = "https://github.com/rlan/csv2ical"
"Bug Tracker" = "https://github.com/rlan/csv2ical/issues"


# ---- Build system ----

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
# The source location for the package.
packages = ["src/csv2ical"]


# ---- Settings ----

[tool.basedpyright]
# BasedPyright currently seems like the best type checker option, much faster
# than mypy and with a good extension for VSCode/Cursor.
# https://marketplace.visualstudio.com/items?itemName=detachhead.basedpyright
# https://docs.basedpyright.com/latest/configuration/config-files/#sample-pyprojecttoml-file
include = ["src"]
# By default BasedPyright is very strict, so you almost certainly want to disable
# some of the rules.
# First, these turn off warnings about (yes) how you ignore warnings:
reportIgnoreCommentWithoutRule = false
reportUnnecessaryTypeIgnoreComment = false
# A few typically noisy warnings are next.
# How many you enable is up to you. The first few are off by default, but you can
# comment/uncomment these as desired:
reportMissingTypeStubs = false
reportUnusedCallResult = false
reportAny = false
reportExplicitAny = false
reportImplicitStringConcatenation = false
reportUnreachable = false
# reportPrivateImportUsage = false
# reportPrivateLocalImportUsage = false
# reportMissingImports = false
# reportUnnecessaryIsInstance = false
# reportUnknownVariableType = false
# reportUnknownArgumentType = false

[tool.codespell]
# Ref: https://github.com/jlevy/simple-modern-uv/blob/06b288a9c1d032c7d6d0e4ed88c8515397529434/template/pyproject.toml.jinja
# Add here as needed:
# ignore-words-list = "foo,bar"
# skip = "foo.py,bar.py"

[tool.ruff]
# Ref: https://github.com/jlevy/simple-modern-uv/blob/06b288a9c1d032c7d6d0e4ed88c8515397529434/template/pyproject.toml.jinja
# Set as desired, typically 88 (black standard) or 100 (wide).
line-length = 88

[tool.ruff.lint]
# Ref: https://github.com/jlevy/simple-modern-uv/blob/06b288a9c1d032c7d6d0e4ed88c8515397529434/template/pyproject.toml.jinja
select = [
    # See: https://docs.astral.sh/ruff/rules/
    # Basic list from: https://docs.astral.sh/ruff/linter/#rule-selection
    "D", # https://docs.astral.sh/ruff/faq/#does-ruff-support-numpy-or-google-style-docstrings
    "E", # https://docs.astral.sh/ruff/rules/#error-e
    "F", # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "UP", # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "B", # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "I", # https://docs.astral.sh/ruff/rules/#isort-i
    # Other possibilities:
    # "D" # https://docs.astral.sh/ruff/rules/#pydocstyle-d
    # "Q" # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    # "COM" # https://docs.astral.sh/ruff/rules/#flake8-commas-com
    # "SIM", # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim

]
ignore = [
    # Disable some rules that are overly pedantic. Add/remove as desired:
    "E501", # https://docs.astral.sh/ruff/rules/line-too-long/
    "E402", # https://docs.astral.sh/ruff/rules/module-import-not-at-top-of-file/
    "E731", # https://docs.astral.sh/ruff/rules/lambda-assignment/
    # We use both ruff formatter and linter so some rules should always be disabled.
    # See: https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191", # https://docs.astral.sh/ruff/rules/tab-indentation/
    "E111", # https://docs.astral.sh/ruff/rules/indentation-with-invalid-multiple/
    "E114", # https://docs.astral.sh/ruff/rules/indentation-with-invalid-multiple-comment/
    "E117", # https://docs.astral.sh/ruff/rules/over-indented/
    "D206", # https://docs.astral.sh/ruff/rules/docstring-tab-indentation/
    "D300", # https://docs.astral.sh/ruff/rules/triple-single-quotes/
    "Q000", # https://docs.astral.sh/ruff/rules/bad-quotes-inline-string/
    "Q001", # https://docs.astral.sh/ruff/rules/bad-quotes-multiline-string/
    "Q002", # https://docs.astral.sh/ruff/rules/bad-quotes-docstring/
    "Q003", # https://docs.astral.sh/ruff/rules/avoidable-escaped-quote/
    "COM812", # https://docs.astral.sh/ruff/rules/missing-trailing-comma/
    "COM819", # https://docs.astral.sh/ruff/rules/prohibited-trailing-comma/
    "ISC002", # https://docs.astral.sh/ruff/rules/multi-line-implicit-string-concatenation/
]

[tool.ruff.lint.pydocstyle]
convention = "numpy" # https://docs.astral.sh/ruff/faq/#does-ruff-support-numpy-or-google-style-docstrings

[tool.ruff.format]
docstring-code-format = true # https://docs.astral.sh/ruff/formatter/#docstring-formatting
